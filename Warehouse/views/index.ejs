<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Farmer Route Optimizer</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <!-- Custom Styles -->
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: linear-gradient(135deg, #f5f7e8 0%, #c7e2b2 100%);
      margin: 0;
      padding-top: 70px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    header {
      background: #fff;
      border-bottom: 1px solid #e0e0e0;
      padding: 10px 0;
      box-shadow: 0 2px 10px rgba(0, 100, 0, 0.1);
      position: fixed;
      width: 100%;
      top: 0;
      z-index: 1000;
    }
    .navbar-brand h3 {
      margin: 0;
      font-weight: 700;
      color: #008000;
    }
    .btn-success {
      background-color: #4a704a;
      border-color: #4a704a;
    }
    .btn-success:hover {
      background-color: #2e5e2e;
      border-color: #2e5e2e;
    }
    .main-content {
      flex: 1;
      padding: 40px 20px;
      margin-top: 70px;
    }
    .container {
      background: rgba(255, 245, 224, 0.95);
      border-radius: 15px;
      padding: 30px;
      max-width: 800px;
      margin: 0 auto;
      box-shadow: 0 8px 32px rgba(0, 100, 0, 0.2);
    }
    h2 {
      color: #2e5e2e;
      margin-bottom: 25px;
      text-align: center;
    }
    #map {
      height: 400px;
      width: 100%;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 4px 15px rgba(0, 100, 0, 0.1);
      z-index: 1;
    }
    .input-group {
      display: flex;
      flex-direction: column;
      gap: 15px;
      margin-bottom: 20px;
    }
    .form-group {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .form-group label {
      font-weight: 500;
      min-width: 150px;
      color: #2e5e2e;
    }
    input, select, button {
      padding: 12px 15px;
      border: 2px solid #8a9a5b;
      border-radius: 8px;
      font-size: 1em;
      background-color: #fffdf5;
    }
    .button-group {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }
    .results-section {
      margin-top: 25px;
      padding: 20px;
      background: #fffdf5;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 100, 0, 0.1);
      overflow: hidden;
    }
    .results, .status {
      margin: 15px 0;
      font-size: 1rem;
      line-height: 1.6;
      color: #333;
    }
    .results h3 {
      color: #2e5e2e;
      margin-bottom: 15px;
      font-size: 1.3rem;
      font-weight: 600;
      border-bottom: 2px solid #2e5e2e;
      padding-bottom: 5px;
    }
    .results ul, .results li {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }
    .results li {
      padding: 8px 0;
      border-bottom: 1px solid #e0e0e0;
      transition: transform 0.3s ease, background-color 0.3s ease;
    }
    .results li:hover {
      transform: translateX(5px);
      background-color: #f8f9fa;
    }
    .status {
      font-style: italic;
      color: #666;
      text-align: center;
      font-size: 1.1rem;
      padding: 10px;
      background: #e9f5e9;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0, 100, 0, 0.1);
    }
    footer {
      background: #2e5e2e;
      color: #fffdf5;
      text-align: center;
      padding: 15px 0;
      margin-top: auto;
    }
    @media (max-width: 768px) {
      .button-group {
        flex-direction: column;
      }
      .form-group {
        flex-direction: column;
        align-items: flex-start;
      }
      .form-group label {
        min-width: auto;
        margin-bottom: 5px;
      }
      #map {
        height: 300px;
      }
      .results h3 {
        font-size: 1.1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Navigation Bar -->
  <header>
    <div class="navbar navbar-expand-lg navbar-light py-1">
      <div class="container-fluid" style="max-width: 1200px; padding: 0 20px;">
        <a class="navbar-brand me-2" href="#"><h3 style="color: #008000;" id="headerTitle">Shetsarathi</h3></a>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <div class="main-content">
    <div class="container">
      <h2 id="appTitle">Farmer Route Optimizer</h2>
      <div id="map"></div>
      <div class="input-group">
        <div class="form-group">
          <label for="startLocation">Start Location:</label>
          <input type="text" id="startLocation" placeholder="Enter start location (e.g., Mumbai)" required>
        </div>
        <div class="form-group">
          <label for="endLocation">End Location:</label>
          <input type="text" id="endLocation" placeholder="Enter end location (e.g., Hyderabad)" required>
        </div>
        <div class="form-group checkbox-group">
          <input type="checkbox" id="perishable" onchange="toggleShelfLife()">
          <label for="perishable">Transporting Perishable Goods</label>
        </div>
        <div class="form-group" id="shelfLifeGroup" style="display: none;">
          <label for="shelfLife">Shelf Life (hours):</label>
          <input type="number" id="shelfLife" min="0" step="0.1" value="0" placeholder="Enter shelf life">
        </div>
        <div class="form-group">
          <label for="transportType">Transport Type:</label>
          <select id="transportType">
            <option value="Standard">Standard</option>
            <option value="Refrigerated">Refrigerated</option>
          </select>
        </div>
        <div class="form-group">
          <label for="crop">Crop Type:</label>
          <input type="text" id="crop" placeholder="Enter crop type (e.g., rice)" required>
        </div>
      </div>
      <div class="language-controls" style="text-align: center; margin: 15px 0;">
        <select id="languageSelect" onchange="toggleLanguage()">
          <option value="en">English</option>
          <option value="mr">Marathi</option>
          <option value="hi">Hindi</option>
        </select>
      </div>
      <div class="button-group">
        <button type="button" onclick="findRoute()" class="btn-success">Find Routes & Warehouses</button>
        <button type="button" onclick="findWarehousesNearMe()" class="btn-success">Find Warehouses Near Me</button>
      </div>
      <div class="results-section">
        <div id="result" class="results" style="display: none;"></div>
        <div id="status" class="status"></div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer>
    <p id="footerText">© 2025 Shetsarathi. All rights reserved.</p>
  </footer>

  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Translations (updated for Farmer Route Optimizer with English as default)
    const translations = {
      en: {
        headerTitle: "Shetsarathi",
        appTitle: "Farmer Route Optimizer",
        mapAttribution: "Leaflet | © OpenStreetMap",
        startLocation: "Start Location:",
        endLocation: "End Location:",
        perishableGoods: "Transporting Perishable Goods",
        shelfLife: "Shelf Life (hours):",
        transportType: "Transport Type:",
        findRoutes: "Find Routes & Warehouses",
        findWarehousesNearMe: "Find Warehouses Near Me",
        cropType: "Crop Type:",
        optimalRoute: "Optimal Route from {} to {}:",
        distance: "Distance: {:.2f} km",
        travelTimeNoTraffic: "Estimated Travel Time (without traffic): {:.2f} mins",
        travelTimeTraffic: "Estimated Travel Time (with traffic): {:.2f} mins",
        adjustedTravelTime: "Adjusted Travel Time (with traffic and weather): {:.2f} mins",
        petrolCost: "Estimated Petrol Cost: ₹{:.2f}",
        tollCost: "Estimated Toll Cost: ₹{:.2f}",
        totalCost: "Total Estimated Cost: ₹{:.2f}",
        remainingShelfLife: "Remaining Shelf Life: {:.2f} hours",
        transportTypeResult: "Transport Type: {}",
        weatherInfo: "Weather Information:",
        startWeather: "Start Location Weather: {} - {} - Wind: {} - Humidity: {}%",
        endWeather: "End Location Weather: {} - {} - Wind: {} - Humidity: {}%",
        footerText: "© 2025 Shetsarathi. All rights reserved.",
      },
      mr: {
        headerTitle: "शेतसारथी",
        appTitle: "शेतकरी मार्ग ऑप्टिमायझर",
        mapAttribution: "लीफलेट | © ओपनस्ट्रीटमॅप",
        startLocation: "सुरुवातीचे स्थान:",
        endLocation: "शेवटचे स्थान:",
        perishableGoods: "नाशवंत माल वाहतूक",
        shelfLife: "शेल्फ लाइफ (तास):",
        transportType: "वाहतूक प्रकार:",
        findRoutes: "मार्ग आणि गोदाम शोधा",
        findWarehousesNearMe: "माझ्या जवळील गोदाम शोधा",
        cropType: "पीक प्रकार:",
        optimalRoute: "{} ते {} पर्यंतचा सर्वोत्तम मार्ग:",
        distance: "अंतर: {:.2f} किमी",
        travelTimeNoTraffic: "अंदाजे प्रवास वेळ (ट्रॅफिकशिवाय): {:.2f} मिनिटे",
        travelTimeTraffic: "अंदाजे प्रवास वेळ (ट्रॅफिकसह): {:.2f} मिनिटे",
        adjustedTravelTime: "समायोजित प्रवास वेळ (ट्रॅफिक आणि हवामानासह): {:.2f} मिनिटे",
        petrolCost: "अंदाजे पेट्रोल खर्च: ₹{:.2f}",
        tollCost: "अंदाजे टोल खर्च: ₹{:.2f}",
        totalCost: "एकूण अंदाजे खर्च: ₹{:.2f}",
        remainingShelfLife: "उर्वरित शेल्फ लाइफ: {:.2f} तास",
        transportTypeResult: "वाहतूक प्रकार: {}",
        weatherInfo: "हवामान माहिती:",
        startWeather: "सुरुवातीचे स्थान हवामान: {} - {} - वारा: {} - आर्द्रता: {}%",
        endWeather: "शेवटचे स्थान हवामान: {} - {} - वारा: {} - आर्द्रता: {}%",
        footerText: "© 2025 शेतसारथी. सर्व हक्क राखीव.",
      },
      hi: {
        headerTitle: "शेतसारथी",
        appTitle: "किसान मार्ग ऑप्टिमाइज़र",
        mapAttribution: "लीफलेट | © ओपनस्ट्रीटमैप",
        startLocation: "प्रारंभिक स्थान:",
        endLocation: "अंतिम स्थान:",
        perishableGoods: "नाशवान माल परिवहन",
        shelfLife: "शेल्फ जीवन (घंटे):",
        transportType: "परिवहन प्रकार:",
        findRoutes: "मार्ग और गोदाम खोजें",
        findWarehousesNearMe: "मेरे पास के गोदाम खोजें",
        cropType: "फसल प्रकार:",
        optimalRoute: "{} से {} तक का सर्वोत्तम मार्ग:",
        distance: "दूरी: {:.2f} किमी",
        travelTimeNoTraffic: "अनुमानित यात्रा समय (बिना ट्रैफिक के): {:.2f} मिनट",
        travelTimeTraffic: "अनुमानित यात्रा समय (ट्रैफिक के साथ): {:.2f} मिनट",
        adjustedTravelTime: "समायोजित यात्रा समय (ट्रैफिक और मौसम के साथ): {:.2f} मिनट",
        petrolCost: "अनुमानित पेट्रोल लागत: ₹{:.2f}",
        tollCost: "अनुमानित टोल लागत: ₹{:.2f}",
        totalCost: "कुल अनुमानित लागत: ₹{:.2f}",
        remainingShelfLife: "शेष शेल्फ जीवन: {:.2f} घंटे",
        transportTypeResult: "परिवहन प्रकार: {}",
        weatherInfo: "मौसम जानकारी:",
        startWeather: "प्रारंभिक स्थान मौसम: {} - {} - हवा: {} - आर्द्रता: {}%",
        endWeather: "अंतिम स्थान मौसम: {} - {} - हवा: {} - आर्द्रता: {}%",
        footerText: "© 2025 शेतसारथी. सर्व हक्क राखीव.",
      },
    };

    let map, marker;
    let mapSelectionEnabled = false;

    // Convert numbers to Marathi numerals
    function convertToMarathiNumbers(text, lang) {
      if (lang !== "mr") return text;
      const marathiDigits = ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"];
      return text.replace(/[0-9]/g, digit => marathiDigits[digit]);
    }

    // Initialize the Leaflet map
    function initMap(lat = 19.0760, lng = 73.8567) { // Default to Mumbai for consistency
      console.log("Initializing map...");
      if (!document.getElementById("map")) {
        console.error("Map container not found!");
        return;
      }
      const lang = document.getElementById("languageSelect").value;
      const t = translations[lang];
      map = L.map('map').setView([lat, lng], 10);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: t.mapAttribution,
        maxZoom: 18
      }).addTo(map);
      marker = L.marker([lat, lng], { draggable: false }).addTo(map);
      console.log("Map initialized at:", lat, lng);
    }

    // Toggle language
    function toggleLanguage() {
      const lang = document.getElementById("languageSelect").value;
      const t = translations[lang];

      document.getElementById("headerTitle").innerText = t.headerTitle;
      document.getElementById("appTitle").innerText = t.appTitle;
      document.querySelector('label[for="startLocation"]').textContent = t.startLocation;
      document.querySelector('label[for="endLocation"]').textContent = t.endLocation;
      document.querySelector('label[for="perishable"]').textContent = t.perishableGoods;
      document.querySelector('label[for="shelfLife"]').textContent = t.shelfLife;
      document.querySelector('label[for="transportType"]').textContent = t.transportType;
      document.querySelector('label[for="crop"]').textContent = t.cropType;
      document.querySelector('button[onclick="findRoute()"]').textContent = t.findRoutes;
      document.querySelector('button[onclick="findWarehousesNearMe()"]').textContent = t.findWarehousesNearMe;
      document.getElementById("footerText").innerText = t.footerText;

      // Update map attribution
      map.eachLayer(layer => {
        if (layer instanceof L.TileLayer) {
          layer.options.attribution = t.mapAttribution;
          map.removeLayer(layer);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: t.mapAttribution,
            maxZoom: 18
          }).addTo(map);
        }
      });

      const resultDiv = document.getElementById("result");
      if (resultDiv.style.display === "block" && resultDiv.dataset.routeData) {
        displayRoute(JSON.parse(resultDiv.dataset.routeData), lang);
      }
    }

    // Toggle shelf life input
    function toggleShelfLife() {
      const shelfLifeGroup = document.getElementById('shelfLifeGroup');
      shelfLifeGroup.style.display = document.getElementById('perishable').checked ? 'flex' : 'none';
    }

    // Find routes and warehouses
    async function findRoute() {
      const startLocation = document.getElementById('startLocation').value;
      const endLocation = document.getElementById('endLocation').value;
      const isPerishable = document.getElementById('perishable').checked;
      const shelfLife = document.getElementById('shelfLife').value;
      const transportType = document.getElementById('transportType').value;
      const crop = document.getElementById('crop').value;
      const lang = document.getElementById("languageSelect").value;
      const t = translations[lang];

      if (!startLocation || !endLocation || !crop) {
        alert(t.error.replace("ठिकाण", "start location, end location, and crop type"));
        return;
      }

      document.getElementById('status').textContent = 'Calculating routes and warehouses...';

      try {
        const response = await fetch('/find-route', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ startLocation, endLocation, isPerishable, shelfLife, transportType, crop }),
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.error || 'Unknown error');

        displayRoute(data, lang);
        const optimalRoute = data.routes[0];
        const latlngs = optimalRoute.steps.map(step => [step.end.lat, step.end.lng]);
        map.fitBounds(L.latLngBounds(latlngs));

        document.getElementById('status').textContent = 'Routes and warehouses found!';
      } catch (error) {
        document.getElementById('status').textContent = `Error: ${error.message}`;
        console.error('Find Route Error:', error);
      }
    }

    // Find warehouses near me
    async function findWarehousesNearMe() {
      const crop = document.getElementById('crop').value;
      const lang = document.getElementById("languageSelect").value;
      const t = translations[lang];

      if (!crop) {
        alert(t.error.replace("ठिकाण", "crop type"));
        return;
      }

      document.getElementById('status').textContent = 'Searching warehouses...';

      try {
        const response = await fetch('/find-warehouses-near-me', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ crop }),
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.error || 'Unknown error');

        displayWarehousesNearMe(data, lang);
        map.fitBounds(L.latLngBounds(data.warehouses.map(w => [w.lat, w.lng])));

        document.getElementById('status').textContent = 'Warehouses found!';
      } catch (error) {
        document.getElementById('status').textContent = `Error: ${error.message}`;
        console.error('Find Warehouses Near Me Error:', error);
      }
    }

    // Display routes and warehouses
    function displayRoute(data, lang) {
      const t = translations[lang];
      let resultHTML = `
        <h3>${t.optimalRoute.replace('{}', data.optimalRouteStats.startLocation).replace('{}', data.optimalRouteStats.endLocation)}</h3>
        <div class="route-details">
          <p><strong>${t.distance.replace('{:.2f}', data.optimalRouteStats.distance.toFixed(2))}</strong></p>
          <p><strong>${t.travelTimeNoTraffic.replace('{:.2f}', data.optimalRouteStats.duration.toFixed(2))}</strong></p>
          <p><strong>${t.travelTimeTraffic.replace('{:.2f}', data.optimalRouteStats.durationInTraffic.toFixed(2))}</strong></p>
          <p><strong>${t.adjustedTravelTime.replace('{:.2f}', data.optimalRouteStats.adjustedDuration.toFixed(2))}</strong></p>
          <p><strong>${t.petrolCost.replace('{:.2f}', data.optimalRouteStats.petrolCost.toFixed(2))}</strong></p>
          <p><strong>${t.tollCost.replace('{:.2f}', data.optimalRouteStats.tollCost.toFixed(2))}</strong></p>
          <p><strong>${t.totalCost.replace('{:.2f}', data.optimalRouteStats.totalCost.toFixed(2))}</strong></p>
      `;
      if (data.optimalRouteStats.isPerishable) {
        resultHTML += `<p><strong>${t.remainingShelfLife.replace('{:.2f}', data.optimalRouteStats.remainingShelfLife.toFixed(2))}</strong></p>`;
      }
      resultHTML += `
          <p><strong>${t.transportTypeResult.replace('{}', data.optimalRouteStats.transportType)}</strong></p>
        </div>
        <h3>${t.weatherInfo}</h3>
        <div class="weather-details">
          <p><strong>${t.startWeather
            .replace('{}', data.optimalRouteWeatherInfo.start.weather)
            .replace('{}', data.optimalRouteWeatherInfo.start.temp)
            .replace('{}', data.optimalRouteWeatherInfo.start.windSpeed)
            .replace('{}', data.optimalRouteWeatherInfo.start.humidity)}</strong></p>
          <p><strong>${t.endWeather
            .replace('{}', data.optimalRouteWeatherInfo.end.weather)
            .replace('{}', data.optimalRouteWeatherInfo.end.temp)
            .replace('{}', data.optimalRouteWeatherInfo.end.windSpeed)
            .replace('{}', data.optimalRouteWeatherInfo.end.humidity)}</strong></p>
        </div>
        <h3>Optimal Warehouses:</h3>
        <div class="warehouse-list">
      `;
      const optimalWarehouses = data.warehouses.filter(w => w.isOptimal);
      resultHTML += optimalWarehouses.map(w => `
          <div class="warehouse-item"><strong>${w.name}</strong> (Lat: ${w.lat.toFixed(4)}, Lng: ${w.lng.toFixed(4)}, Contact: ${w.contact})</div>
        `).join('');
      resultHTML += '</div>';

      // Add non-optimal warehouses under "Warehouses" if any exist
      const nonOptimalWarehouses = data.warehouses.filter(w => !w.isOptimal);
      if (nonOptimalWarehouses.length > 0) {
        resultHTML += `
          <h3>Warehouses:</h3>
          <div class="warehouse-list">
        `;
        resultHTML += nonOptimalWarehouses.map(w => `
            <div class="warehouse-item">${w.name} (Lat: ${w.lat.toFixed(4)}, Lng: ${w.lng.toFixed(4)}, Contact: ${w.contact})</div>
          `).join('');
        resultHTML += '</div>';
      }

      document.getElementById('result').innerHTML = resultHTML;
      document.getElementById('result').style.display = 'block';

      // Clear previous map layers
      map.eachLayer(layer => {
        if (layer instanceof L.Polyline || layer instanceof L.Marker) {
          map.removeLayer(layer);
        }
      });

      // Render all routes
      data.routes.forEach((route, idx) => {
        const color = idx === 0 ? '#FF0000' : '#0000FF'; // Red for optimal, blue for alternatives
        const weight = idx === 0 ? 5 : 3;
        const latlngs = route.steps.map(step => [step.end.lat, step.end.lng]);
        L.polyline(latlngs, { color: color, weight: weight, opacity: 0.7 }).addTo(map);
      });

      // Add warehouse markers
      data.warehouses.forEach(warehouse => {
        const icon = warehouse.isOptimal ? L.icon({
          iconUrl: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34]
        }) : L.icon({
          iconUrl: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34]
        });
        const marker = L.marker([warehouse.lat, warehouse.lng], { icon: icon }).addTo(map);
        const popupContent = `Warehouse: ${warehouse.name}<br>Crop: ${crop}<br>Contact: ${warehouse.contact}${warehouse.isOptimal ? '<br><b>Optimal Warehouse</b>' : ''}`;
        marker.bindPopup(popupContent);
      });
    }

    // Display warehouses near me
    function displayWarehousesNearMe(data, lang) {
      const t = translations[lang];
      let resultHTML = `<h3>Optimal Warehouses:</h3><div class="warehouse-list">`;
      const optimalWarehouses = data.warehouses.filter(w => w.isOptimal);
      resultHTML += optimalWarehouses.map(w => `
        <div class="warehouse-item"><strong>${w.name}</strong> (Lat: ${w.lat.toFixed(4)}, Lng: ${w.lng.toFixed(4)}, Contact: ${w.contact})</div>
      `).join('');
      resultHTML += '</div>';

      // Add non-optimal warehouses under "Warehouses" if any exist
      const nonOptimalWarehouses = data.warehouses.filter(w => !w.isOptimal);
      if (nonOptimalWarehouses.length > 0) {
        resultHTML += `
          <h3>Warehouses:</h3>
          <div class="warehouse-list">
        `;
        resultHTML += nonOptimalWarehouses.map(w => `
            <div class="warehouse-item">${w.name} (Lat: ${w.lat.toFixed(4)}, Lng: ${w.lng.toFixed(4)}, Contact: ${w.contact})</div>
          `).join('');
        resultHTML += '</div>';
      }

      document.getElementById('result').innerHTML = resultHTML;
      document.getElementById('result').style.display = 'block';

      // Clear previous map layers
      map.eachLayer(layer => {
        if (layer instanceof L.Marker) {
          map.removeLayer(layer);
        }
      });

      // Add warehouse markers
      data.warehouses.forEach(warehouse => {
        const icon = warehouse.isOptimal ? L.icon({
          iconUrl: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34]
        }) : L.icon({
          iconUrl: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34]
        });
        const marker = L.marker([warehouse.lat, warehouse.lng], { icon: icon }).addTo(map);
        const popupContent = `Warehouse: ${warehouse.name}<br>Crop: ${crop}<br>Contact: ${warehouse.contact}${warehouse.isOptimal ? '<br><b>Optimal Warehouse</b>' : ''}`;
        marker.bindPopup(popupContent);
      });
    }

    // Initialize on load
    window.onload = () => {
      console.log("Page loaded, initializing...");
      initMap();
      document.getElementById("languageSelect").value = 'en'; // Default to English
      toggleLanguage();
    };
  </script>
</body>
</html>